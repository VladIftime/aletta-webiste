import { join } from 'path';
import { makeStateKey } from '@angular/platform-browser';
import { transformAnimationFilenameToKey } from 'ngx-lottie';
import { readFileWithAnimationData } from './utils';
function readAndTransferAnimationData(transferState, animations, pathsToAnimations) {
    const sources = [];
    for (let i = 0, length = animations.length; i < length; i++) {
        const path = pathsToAnimations[i];
        const source = readFileWithAnimationData(path).then(animationData => {
            transferAnimationData(transferState, animations[i], animationData);
        });
        sources.push(source);
    }
    return sources;
}
function transferAnimationData(state, animation, animationData) {
    animation = transformAnimationFilenameToKey(animation);
    const key = makeStateKey(animation);
    state.set(key, JSON.parse(animationData));
}
export function appInitializerFactory(options, state) {
    const pathsToAnimations = resolveLottiePaths(options);
    const sources = readAndTransferAnimationData(state, options.preloadAnimations.animations, pathsToAnimations);
    return () => Promise.all(sources);
}
export function resolveLottiePaths({ preloadAnimations }) {
    const { folder, animations } = preloadAnimations;
    const path = join(process.cwd(), folder);
    return animations.map(animation => join(path, animation));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJuYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9uZ3gtbG90dGllL3NlcnZlci9zcmMvaW50ZXJuYWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUIsT0FBTyxFQUFpQixZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV4RSxPQUFPLEVBQXFCLCtCQUErQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRWhGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUdwRCxTQUFTLDRCQUE0QixDQUNuQyxhQUE0QixFQUM1QixVQUErQixFQUMvQixpQkFBb0M7SUFFcEMsTUFBTSxPQUFPLEdBQW9CLEVBQUUsQ0FBQztJQUVwQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNELE1BQU0sSUFBSSxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWxDLE1BQU0sTUFBTSxHQUFHLHlCQUF5QixDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUNsRSxxQkFBcUIsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUN0QjtJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUM1QixLQUFvQixFQUNwQixTQUE0QixFQUM1QixhQUE0QjtJQUU1QixTQUFTLEdBQUcsK0JBQStCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkQsTUFBTSxHQUFHLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLE9BQTRCLEVBQUUsS0FBb0I7SUFDdEYsTUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RCxNQUFNLE9BQU8sR0FBRyw0QkFBNEIsQ0FDMUMsS0FBSyxFQUNMLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQ3BDLGlCQUFpQixDQUNsQixDQUFDO0lBRUYsT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQUMsRUFBRSxpQkFBaUIsRUFBdUI7SUFDM0UsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsR0FBRyxpQkFBaUIsQ0FBQztJQUNqRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBRXpDLE9BQU8sVUFBVSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgVHJhbnNmZXJTdGF0ZSwgbWFrZVN0YXRlS2V5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IEFuaW1hdGlvbkZpbGVuYW1lLCB0cmFuc2Zvcm1BbmltYXRpb25GaWxlbmFtZVRvS2V5IH0gZnJvbSAnbmd4LWxvdHRpZSc7XG5cbmltcG9ydCB7IHJlYWRGaWxlV2l0aEFuaW1hdGlvbkRhdGEgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IExvdHRpZVNlcnZlck9wdGlvbnMsIFBhdGhUb0FuaW1hdGlvbiwgQW5pbWF0aW9uRGF0YSB9IGZyb20gJy4vc3ltYm9scyc7XG5cbmZ1bmN0aW9uIHJlYWRBbmRUcmFuc2ZlckFuaW1hdGlvbkRhdGEoXG4gIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUsXG4gIGFuaW1hdGlvbnM6IEFuaW1hdGlvbkZpbGVuYW1lW10sXG4gIHBhdGhzVG9BbmltYXRpb25zOiBQYXRoVG9BbmltYXRpb25bXSxcbik6IFByb21pc2U8dm9pZD5bXSB7XG4gIGNvbnN0IHNvdXJjZXM6IFByb21pc2U8dm9pZD5bXSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBhbmltYXRpb25zLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgcGF0aCA9IHBhdGhzVG9BbmltYXRpb25zW2ldO1xuXG4gICAgY29uc3Qgc291cmNlID0gcmVhZEZpbGVXaXRoQW5pbWF0aW9uRGF0YShwYXRoKS50aGVuKGFuaW1hdGlvbkRhdGEgPT4ge1xuICAgICAgdHJhbnNmZXJBbmltYXRpb25EYXRhKHRyYW5zZmVyU3RhdGUsIGFuaW1hdGlvbnNbaV0sIGFuaW1hdGlvbkRhdGEpO1xuICAgIH0pO1xuXG4gICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gIH1cblxuICByZXR1cm4gc291cmNlcztcbn1cblxuZnVuY3Rpb24gdHJhbnNmZXJBbmltYXRpb25EYXRhKFxuICBzdGF0ZTogVHJhbnNmZXJTdGF0ZSxcbiAgYW5pbWF0aW9uOiBBbmltYXRpb25GaWxlbmFtZSxcbiAgYW5pbWF0aW9uRGF0YTogQW5pbWF0aW9uRGF0YSxcbik6IHZvaWQge1xuICBhbmltYXRpb24gPSB0cmFuc2Zvcm1BbmltYXRpb25GaWxlbmFtZVRvS2V5KGFuaW1hdGlvbik7XG4gIGNvbnN0IGtleSA9IG1ha2VTdGF0ZUtleShhbmltYXRpb24pO1xuICBzdGF0ZS5zZXQoa2V5LCBKU09OLnBhcnNlKGFuaW1hdGlvbkRhdGEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcEluaXRpYWxpemVyRmFjdG9yeShvcHRpb25zOiBMb3R0aWVTZXJ2ZXJPcHRpb25zLCBzdGF0ZTogVHJhbnNmZXJTdGF0ZSkge1xuICBjb25zdCBwYXRoc1RvQW5pbWF0aW9ucyA9IHJlc29sdmVMb3R0aWVQYXRocyhvcHRpb25zKTtcbiAgY29uc3Qgc291cmNlcyA9IHJlYWRBbmRUcmFuc2ZlckFuaW1hdGlvbkRhdGEoXG4gICAgc3RhdGUsXG4gICAgb3B0aW9ucy5wcmVsb2FkQW5pbWF0aW9ucy5hbmltYXRpb25zLFxuICAgIHBhdGhzVG9BbmltYXRpb25zLFxuICApO1xuXG4gIHJldHVybiAoKSA9PiBQcm9taXNlLmFsbChzb3VyY2VzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVMb3R0aWVQYXRocyh7IHByZWxvYWRBbmltYXRpb25zIH06IExvdHRpZVNlcnZlck9wdGlvbnMpOiBQYXRoVG9BbmltYXRpb25bXSB7XG4gIGNvbnN0IHsgZm9sZGVyLCBhbmltYXRpb25zIH0gPSBwcmVsb2FkQW5pbWF0aW9ucztcbiAgY29uc3QgcGF0aCA9IGpvaW4ocHJvY2Vzcy5jd2QoKSwgZm9sZGVyKTtcblxuICByZXR1cm4gYW5pbWF0aW9ucy5tYXAoYW5pbWF0aW9uID0+IGpvaW4ocGF0aCwgYW5pbWF0aW9uKSk7XG59XG4iXX0=