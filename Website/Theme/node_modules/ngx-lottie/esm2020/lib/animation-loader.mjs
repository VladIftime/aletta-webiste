import { Injectable, NgZone, Inject } from '@angular/core';
import { from, of, animationFrameScheduler } from 'rxjs';
import { map, observeOn, publishReplay, refCount } from 'rxjs/operators';
import { LOTTIE_OPTIONS, } from './symbols';
import * as i0 from "@angular/core";
function convertPlayerOrLoaderToObservable(player) {
    const playerOrLoader = player();
    if (playerOrLoader instanceof Promise) {
        return from(playerOrLoader).pipe(map(module => module.default || module), publishReplay(1), refCount());
    }
    else {
        return of(playerOrLoader);
    }
}
export class AnimationLoader {
    constructor(ngZone, options) {
        this.ngZone = ngZone;
        this.options = options;
        this.player$ = convertPlayerOrLoaderToObservable(this.options.player).pipe(observeOn(animationFrameScheduler));
    }
    loadAnimation(options) {
        return this.player$.pipe(map(player => this.createAnimationItem(player, options)));
    }
    resolveOptions(options, container) {
        return Object.assign({
            container,
            renderer: 'svg',
            loop: true,
            autoplay: true,
        }, options);
    }
    createAnimationItem(player, options) {
        return this.ngZone.runOutsideAngular(() => player.loadAnimation(options));
    }
}
/** @nocollapse */ /** @nocollapse */ AnimationLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AnimationLoader, deps: [{ token: i0.NgZone }, { token: LOTTIE_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ /** @nocollapse */ AnimationLoader.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AnimationLoader });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: AnimationLoader, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOTTIE_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvbmd4LWxvdHRpZS9zcmMvbGliL2FuaW1hdGlvbi1sb2FkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNELE9BQU8sRUFBYyxJQUFJLEVBQUUsRUFBRSxFQUFFLHVCQUF1QixFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6RSxPQUFPLEVBQ0wsY0FBYyxHQVFmLE1BQU0sV0FBVyxDQUFDOztBQUVuQixTQUFTLGlDQUFpQyxDQUN4QyxNQUFtQztJQUVuQyxNQUFNLGNBQWMsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQUVoQyxJQUFJLGNBQWMsWUFBWSxPQUFPLEVBQUU7UUFDckMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUM5QixHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxFQUN2QyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQ2hCLFFBQVEsRUFBRSxDQUNYLENBQUM7S0FDSDtTQUFNO1FBQ0wsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDM0I7QUFDSCxDQUFDO0FBR0QsTUFBTSxPQUFPLGVBQWU7SUFLMUIsWUFBb0IsTUFBYyxFQUFrQyxPQUFzQjtRQUF0RSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQWtDLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFKaEYsWUFBTyxHQUFHLGlDQUFpQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUM3RSxTQUFTLENBQUMsdUJBQXVCLENBQUMsQ0FDbkMsQ0FBQztJQUUyRixDQUFDO0lBRTlGLGFBQWEsQ0FDWCxPQUEwRDtRQUUxRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JGLENBQUM7SUFFRCxjQUFjLENBQ1osT0FBZ0MsRUFDaEMsU0FBc0I7UUFFdEIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUNsQjtZQUNFLFNBQVM7WUFDVCxRQUFRLEVBQUUsS0FBSztZQUNmLElBQUksRUFBRSxJQUFJO1lBQ1YsUUFBUSxFQUFFLElBQUk7U0FDZixFQUNELE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVTLG1CQUFtQixDQUMzQixNQUFvQixFQUNwQixPQUEwRDtRQUUxRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7O2tKQWpDVSxlQUFlLHdDQUtrQixjQUFjO3NKQUwvQyxlQUFlOzJGQUFmLGVBQWU7a0JBRDNCLFVBQVU7OzBCQU00QixNQUFNOzJCQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBvZiwgYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgb2JzZXJ2ZU9uLCBwdWJsaXNoUmVwbGF5LCByZWZDb3VudCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgTE9UVElFX09QVElPTlMsXG4gIExvdHRpZVBsYXllcixcbiAgTG90dGllT3B0aW9ucyxcbiAgQW5pbWF0aW9uSXRlbSxcbiAgQW5pbWF0aW9uT3B0aW9ucyxcbiAgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICBMb3R0aWVQbGF5ZXJGYWN0b3J5T3JMb2FkZXIsXG59IGZyb20gJy4vc3ltYm9scyc7XG5cbmZ1bmN0aW9uIGNvbnZlcnRQbGF5ZXJPckxvYWRlclRvT2JzZXJ2YWJsZShcbiAgcGxheWVyOiBMb3R0aWVQbGF5ZXJGYWN0b3J5T3JMb2FkZXIsXG4pOiBPYnNlcnZhYmxlPExvdHRpZVBsYXllcj4ge1xuICBjb25zdCBwbGF5ZXJPckxvYWRlciA9IHBsYXllcigpO1xuXG4gIGlmIChwbGF5ZXJPckxvYWRlciBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICByZXR1cm4gZnJvbShwbGF5ZXJPckxvYWRlcikucGlwZShcbiAgICAgIG1hcChtb2R1bGUgPT4gbW9kdWxlLmRlZmF1bHQgfHwgbW9kdWxlKSxcbiAgICAgIHB1Ymxpc2hSZXBsYXkoMSksXG4gICAgICByZWZDb3VudCgpLFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9mKHBsYXllck9yTG9hZGVyKTtcbiAgfVxufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uTG9hZGVyIHtcbiAgcHJvdGVjdGVkIHBsYXllciQgPSBjb252ZXJ0UGxheWVyT3JMb2FkZXJUb09ic2VydmFibGUodGhpcy5vcHRpb25zLnBsYXllcikucGlwZShcbiAgICBvYnNlcnZlT24oYW5pbWF0aW9uRnJhbWVTY2hlZHVsZXIpLFxuICApO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIEBJbmplY3QoTE9UVElFX09QVElPTlMpIHByaXZhdGUgb3B0aW9uczogTG90dGllT3B0aW9ucykge31cblxuICBsb2FkQW5pbWF0aW9uKFxuICAgIG9wdGlvbnM6IEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhIHwgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgsXG4gICk6IE9ic2VydmFibGU8QW5pbWF0aW9uSXRlbT4ge1xuICAgIHJldHVybiB0aGlzLnBsYXllciQucGlwZShtYXAocGxheWVyID0+IHRoaXMuY3JlYXRlQW5pbWF0aW9uSXRlbShwbGF5ZXIsIG9wdGlvbnMpKSk7XG4gIH1cblxuICByZXNvbHZlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBBbmltYXRpb25PcHRpb25zIHwgbnVsbCxcbiAgICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICApOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICByZW5kZXJlcjogJ3N2ZycsXG4gICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgIGF1dG9wbGF5OiB0cnVlLFxuICAgICAgfSxcbiAgICAgIG9wdGlvbnMsXG4gICAgKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjcmVhdGVBbmltYXRpb25JdGVtKFxuICAgIHBsYXllcjogTG90dGllUGxheWVyLFxuICAgIG9wdGlvbnM6IEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhIHwgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgsXG4gICk6IEFuaW1hdGlvbkl0ZW0ge1xuICAgIHJldHVybiB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiBwbGF5ZXIubG9hZEFuaW1hdGlvbihvcHRpb25zKSk7XG4gIH1cbn1cbiJdfQ==